#!/usr/bin/env python
#

import argparse
import os
import pkgutil
import shlex
import subprocess
import sys


def run(editor: str, path: str) -> None:
    cmd = f"{editor} {path}"
    subprocess.run(cmd, check=True, shell=True)
    # subprocess.run(shlex.split(cmd), check=True, shell=True)


def get_parser():
    parser = argparse.ArgumentParser(
        prog="open_py", description="Use the default editor to open the specified python module"
    )
    parser.add_argument("module", help="The name of the module to open")
    parser.add_argument("--editor", help="The name of the editor to use. Defaults to 'VISUAL'")
    return parser


def resolve_editor(editor: str) -> str:
    if not editor:
        editor = os.environ.get("VISUAL")
    if not editor:
        editor = os.environ.get("EDITOR")
    if not editor:
        raise sys.exit(
            "The editor could not be resolved. Please specify one via '--editor /path/to/editor'"
        )
    return editor


def main():
    parser = get_parser()
    args = parser.parse_args()
    editor = resolve_editor(args.editor)

    data = {}
    for item in pkgutil.iter_modules():
        if item.ispkg:
            path = os.path.join(item.module_finder.path, item.name)
        else:
            path = os.path.join(item.module_finder.path, f"{item.name}.py")
        data[item.name] = path

    if args.module not in data:
        raise sys.exit(f"The specified module was not found: {args.module}")
    else:
        path = data[args.module]
        print(path)
        run(editor=editor, path=path)


if __name__ == "__main__":
    main()
